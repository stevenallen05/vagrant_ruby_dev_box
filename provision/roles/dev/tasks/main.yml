---
# tasks file for provision/roles/dev
- name: Ensure ~/gits
  file:
    path: "{{ ansible_env.HOME }}/gits"
    state: directory
    mode: '0755'
- name: "Install basic dependencies"
  become: yes
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - ca-certificates
    - software-properties-common
    - dirmngr
    - gcc
    - wget
    - libssl-dev
    - libreadline-dev
    - zlib1g-dev
    - libcurl4
    - libcurl4-openssl-dev
    - libpq-dev
    - unzip
- name: "Install helpful things"
  become: yes
  apt:
    name: "{{ packages }}"
    state: present
  vars:
    packages:
    - screen
    - glances
    - stubby

### Git bash
- name: Setting up git bash theme
  git:
    repo: 'https://github.com/magicmonty/bash-git-prompt.git'
    dest: "{{ ansible_env.HOME }}/.bash-git-prompt"
    depth: 1
- name: Ensure git bash theme in bashrc
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      if [ -f "$HOME/.bash-git-prompt/gitprompt.sh" ]; then
        GIT_PROMPT_ONLY_IN_REPO=1
        source $HOME/.bash-git-prompt/gitprompt.sh
      fi
    marker: '# {mark} ANSIBLE MANAGED BLOCK - gitprompt'

### NordVPN
- name: Check if nordvpn repo is installed
  command: dpkg-query -W nordvpn-release
  register: nordvpn_repo_check
  failed_when: nordvpn_repo_check.rc > 1
  changed_when: nordvpn_repo_check.rc == 1
- name: Download nordvpn repo
  when: nordvpn_repo_check.rc == 1
  get_url:
    url: https://repo.nordvpn.com/deb/nordvpn/debian/pool/main/nordvpn-release_1.0.0_all.deb
    dest: /tmp/nordvpn-release_1.0.0_all.deb
- name: Install nordvpn repo
  become: yes
  when: nordvpn_repo_check.rc == 1
  apt:
    deb: /tmp/nordvpn-release_1.0.0_all.deb
- name: Install nordvpn
  become: yes
  apt:
    package: nordvpn
    state: present
    update_cache: yes


### Cleanup
- name: Add heroku key
  become: yes
  apt_key:
    url: http://toolbelt.herokuapp.com/apt/release.key
    state: present
- name: "Copy gitconfig"
  copy:
    src: "{{ role_path }}/files/.gitconfig"
    dest: "{{ ansible_env.HOME }}/.gitconfig"
- name: Ensure unison job exists
  cron:
    name: "sync gits with host"
    minute: "*/30"
    job: "/usr/bin/flock -n /tmp/synclock -c 'unison gits' > /dev/null"

### ~/bin
- name: Ensure ~/bin
  file:
    path: "{{ ansible_env.HOME }}/bin"
    state: directory
    mode: '0755'
- name: Ensure local bin
  blockinfile:
    dest: "{{ ansible_env.HOME }}/.bashrc"
    block: |
      export PATH=$HOME/bin:$PATH
    marker: '# {mark} ANSIBLE MANAGED BLOCK - $HOME/bin'

### ngrok
- name: Check that the ngrok bin exists
  stat:
    path: "{{ ansible_env.HOME }}/bin/ngrok"
  register: ngrok_result
- name: Download and install ngrok
  when: ngrok_result.stat.exists == False
  unarchive:
    src: https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
    dest: "{{ ansible_env.HOME}}/bin/"
    remote_src: yes
- name: Update ngrok
  command: "{{ ansible_env.HOME}}/bin/ngrok update"

  